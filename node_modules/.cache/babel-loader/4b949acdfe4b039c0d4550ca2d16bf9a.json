{"ast":null,"code":"import _regeneratorRuntime from \"D:/Solana/metaplex/metaplex-master/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Solana/metaplex/metaplex-master/js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useCallback, useEffect } from 'react';\nimport { getGatekeeperEndpoint } from '../solana/config';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\n\nvar useGatekeeper = function useGatekeeper(_ref, state, dispatch) {\n  var wallet = _ref.wallet,\n      stage = _ref.stage,\n      gatekeeperClient = _ref.gatekeeperClient;\n  var gatekeeperEndpoint = getGatekeeperEndpoint(stage);\n\n  var _useWalletHooks = useWalletHooks(wallet, state, dispatch),\n      expectWalletConnected = _useWalletHooks.expectWalletConnected;\n\n  var tokenIssuanceState = state.tokenIssuanceState,\n      gatekeeperNetworkAddress = state.gatekeeperNetworkAddress;\n  /**\n   * if a request is not already in progress, initiate a request to the gatekeeper for a new token\n   * and dispatch an event so we know it's in progress\n   */\n\n  var waitForGatekeeperIssuanceRequest = useCallback(\n  /*#__PURE__*/\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var payload, proof, connectedWallet, requestGatewayTokenFromGatekeeperResult;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              payload = _ref2.payload, proof = _ref2.proof;\n              connectedWallet = expectWalletConnected();\n\n              if (!connectedWallet) {\n                _context.next = 15;\n                break;\n              }\n\n              logger.debug('waitForGatekeeperIssuanceRequest ready to call requestGatewayTokenFromGatekeeper', {\n                payload: payload\n              });\n              dispatch({\n                type: 'requestGatekeeperIssuance'\n              });\n              _context.next = 7;\n              return gatekeeperClient().requestGatewayTokenFromGatekeeper({\n                wallet: connectedWallet,\n                payload: payload,\n                proof: proof\n              });\n\n            case 7:\n              requestGatewayTokenFromGatekeeperResult = _context.sent;\n              logger.debug('requestGatewayTokenFromGatekeeperResult', requestGatewayTokenFromGatekeeperResult);\n\n              if (!(requestGatewayTokenFromGatekeeperResult.status >= 400)) {\n                _context.next = 13;\n                break;\n              }\n\n              logger.error('Error requesting token from gatekeeper');\n              dispatch({\n                type: 'requestGatekeeperIssuanceFailed'\n              });\n              throw new Error('Error requesting token from gatekeeper');\n\n            case 13:\n              logger.debug('Successfully created gatekeeper token');\n              dispatch({\n                type: 'requestGatekeeperIssuanceComplete'\n              });\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }(), [gatekeeperEndpoint, gatekeeperClient, tokenIssuanceState, expectWalletConnected, stage]);\n  /**\n   * Update the state when the Gatekeeper network changes\n   */\n\n  useEffect(function () {\n    if (wallet && wallet.publicKey && gatekeeperNetworkAddress) {\n      dispatch({\n        type: 'gatekeeperNetworkChanged',\n        gatekeeperNetworkAddress: gatekeeperNetworkAddress\n      });\n    }\n  }, [gatekeeperNetworkAddress]);\n  return {\n    waitForGatekeeperIssuanceRequest: waitForGatekeeperIssuanceRequest,\n    gatekeeperClient: gatekeeperClient\n  };\n};\n\nexport default useGatekeeper;","map":{"version":3,"sources":["D:/Solana/metaplex/metaplex-master/js/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useGatekeeper.js"],"names":["useCallback","useEffect","getGatekeeperEndpoint","logger","useWalletHooks","useGatekeeper","state","dispatch","wallet","stage","gatekeeperClient","gatekeeperEndpoint","expectWalletConnected","tokenIssuanceState","gatekeeperNetworkAddress","waitForGatekeeperIssuanceRequest","payload","proof","connectedWallet","debug","type","requestGatewayTokenFromGatekeeper","requestGatewayTokenFromGatekeeperResult","status","error","Error","publicKey"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAuCC,KAAvC,EAA8CC,QAA9C,EAA2D;AAAA,MAAxDC,MAAwD,QAAxDA,MAAwD;AAAA,MAAhDC,KAAgD,QAAhDA,KAAgD;AAAA,MAAzCC,gBAAyC,QAAzCA,gBAAyC;AAC7E,MAAMC,kBAAkB,GAAGT,qBAAqB,CAACO,KAAD,CAAhD;;AACA,wBAAkCL,cAAc,CAACI,MAAD,EAASF,KAAT,EAAgBC,QAAhB,CAAhD;AAAA,MAAQK,qBAAR,mBAAQA,qBAAR;;AACA,MAAQC,kBAAR,GAAyDP,KAAzD,CAAQO,kBAAR;AAAA,MAA4BC,wBAA5B,GAAyDR,KAAzD,CAA4BQ,wBAA5B;AACA;AACJ;AACA;AACA;;AACI,MAAMC,gCAAgC,GAAGf,WAAW;AAAA;AACpD;AADoD;AAAA,yEAEpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAASgB,cAAAA,OAAT,SAASA,OAAT,EAAkBC,KAAlB,SAAkBA,KAAlB;AACUC,cAAAA,eADV,GAC4BN,qBAAqB,EADjD;;AAAA,mBAEQM,eAFR;AAAA;AAAA;AAAA;;AAGQf,cAAAA,MAAM,CAACgB,KAAP,CAAa,kFAAb,EAAiG;AAC7FH,gBAAAA,OAAO,EAAPA;AAD6F,eAAjG;AAGAT,cAAAA,QAAQ,CAAC;AAAEa,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAR;AANR;AAAA,qBAO8DV,gBAAgB,GAAGW,iCAAnB,CAAqD;AACvGb,gBAAAA,MAAM,EAAEU,eAD+F;AAEvGF,gBAAAA,OAAO,EAAPA,OAFuG;AAGvGC,gBAAAA,KAAK,EAALA;AAHuG,eAArD,CAP9D;;AAAA;AAOcK,cAAAA,uCAPd;AAYQnB,cAAAA,MAAM,CAACgB,KAAP,CAAa,yCAAb,EAAwDG,uCAAxD;;AAZR,oBAaYA,uCAAuC,CAACC,MAAxC,IAAkD,GAb9D;AAAA;AAAA;AAAA;;AAcYpB,cAAAA,MAAM,CAACqB,KAAP,CAAa,wCAAb;AACAjB,cAAAA,QAAQ,CAAC;AAAEa,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAR;AAfZ,oBAgBkB,IAAIK,KAAJ,CAAU,wCAAV,CAhBlB;;AAAA;AAkBQtB,cAAAA,MAAM,CAACgB,KAAP,CAAa,uCAAb;AACAZ,cAAAA,QAAQ,CAAC;AAAEa,gBAAAA,IAAI,EAAE;AAAR,eAAD,CAAR;;AAnBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFoD;;AAAA;AAAA;AAAA;AAAA,OAuBjD,CAACT,kBAAD,EAAqBD,gBAArB,EAAuCG,kBAAvC,EAA2DD,qBAA3D,EAAkFH,KAAlF,CAvBiD,CAApD;AAwBA;AACJ;AACA;;AACIR,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIO,MAAM,IAAIA,MAAM,CAACkB,SAAjB,IAA8BZ,wBAAlC,EAA4D;AACxDP,MAAAA,QAAQ,CAAC;AAAEa,QAAAA,IAAI,EAAE,0BAAR;AAAoCN,QAAAA,wBAAwB,EAAxBA;AAApC,OAAD,CAAR;AACH;AACJ,GAJQ,EAIN,CAACA,wBAAD,CAJM,CAAT;AAKA,SAAO;AACHC,IAAAA,gCAAgC,EAAhCA,gCADG;AAEHL,IAAAA,gBAAgB,EAAhBA;AAFG,GAAP;AAIH,CA5CD;;AA6CA,eAAeL,aAAf","sourcesContent":["import { useCallback, useEffect } from 'react';\nimport { getGatekeeperEndpoint } from '../solana/config';\nimport logger from '../logger';\nimport useWalletHooks from './useWalletHooks';\nconst useGatekeeper = ({ wallet, stage, gatekeeperClient, }, state, dispatch) => {\n    const gatekeeperEndpoint = getGatekeeperEndpoint(stage);\n    const { expectWalletConnected } = useWalletHooks(wallet, state, dispatch);\n    const { tokenIssuanceState, gatekeeperNetworkAddress } = state;\n    /**\n     * if a request is not already in progress, initiate a request to the gatekeeper for a new token\n     * and dispatch an event so we know it's in progress\n     */\n    const waitForGatekeeperIssuanceRequest = useCallback(\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    async ({ payload, proof }) => {\n        const connectedWallet = expectWalletConnected();\n        if (connectedWallet) {\n            logger.debug('waitForGatekeeperIssuanceRequest ready to call requestGatewayTokenFromGatekeeper', {\n                payload,\n            });\n            dispatch({ type: 'requestGatekeeperIssuance' });\n            const requestGatewayTokenFromGatekeeperResult = await gatekeeperClient().requestGatewayTokenFromGatekeeper({\n                wallet: connectedWallet,\n                payload,\n                proof,\n            });\n            logger.debug('requestGatewayTokenFromGatekeeperResult', requestGatewayTokenFromGatekeeperResult);\n            if (requestGatewayTokenFromGatekeeperResult.status >= 400) {\n                logger.error('Error requesting token from gatekeeper');\n                dispatch({ type: 'requestGatekeeperIssuanceFailed' });\n                throw new Error('Error requesting token from gatekeeper');\n            }\n            logger.debug('Successfully created gatekeeper token');\n            dispatch({ type: 'requestGatekeeperIssuanceComplete' });\n        }\n    }, [gatekeeperEndpoint, gatekeeperClient, tokenIssuanceState, expectWalletConnected, stage]);\n    /**\n     * Update the state when the Gatekeeper network changes\n     */\n    useEffect(() => {\n        if (wallet && wallet.publicKey && gatekeeperNetworkAddress) {\n            dispatch({ type: 'gatekeeperNetworkChanged', gatekeeperNetworkAddress });\n        }\n    }, [gatekeeperNetworkAddress]);\n    return {\n        waitForGatekeeperIssuanceRequest,\n        gatekeeperClient,\n    };\n};\nexport default useGatekeeper;\n"]},"metadata":{},"sourceType":"module"}
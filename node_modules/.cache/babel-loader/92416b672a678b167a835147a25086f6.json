{"ast":null,"code":"import React, { useContext, useEffect, useReducer, useState, useCallback } from 'react';\nimport IframeResizer from 'iframe-resizer-react';\nimport { GatewayStatus, TokenIssuanceState, CivicPassIssuanceStatus, RefreshTokenState } from '../types';\nimport logger from '../logger';\nimport { Wrapper } from '../wrapper/Wrapper';\nimport { IFRAME_ID, TESTID_IFRAME, TESTID_WRAPPER, TESTID_WRAPPER_CONTAINER } from '../constants';\nimport { DEFAULT_GATEKEEPER_STAGE, getCivicPassEndpoint } from '../config';\nimport { getGatekeeperEndpoint } from '../solana/config';\nimport GatekeeperClient from '../utils/gatekeeperClient';\nimport reducer from '../useReducer';\nimport useUserInteraction from '../useHooks/useUserInteraction';\nimport useOrchestration from '../useHooks/useOrchestration';\nimport useCivicPass from '../useHooks/useCivicPass';\nimport useWalletHooks from '../useHooks/useWalletHooks';\nconst GatewayContext = React.createContext({\n  requestGatewayToken: async () => {},\n  gatewayStatus: GatewayStatus.NOT_REQUESTED,\n  stage: DEFAULT_GATEKEEPER_STAGE\n});\n\nconst redirectUrlFromWindow = () => encodeURIComponent(window.location.href.split('?')[0]);\n\nexport const GatewayProvider = _ref => {\n  let {\n    children = null,\n    wallet,\n    chainImplementation,\n    wrapper,\n    logo,\n    stage = 'prod',\n    redirectUrl,\n    gatekeeperNetwork,\n    options = {\n      autoShowModal: true\n    }\n  } = _ref;\n  const gatekeeperNetworkAddress = gatekeeperNetwork;\n  const [state, dispatch] = useReducer(reducer, {\n    options,\n    gatewayStatus: GatewayStatus.UNKNOWN,\n    tokenRequested: false,\n    iframeMinimized: false,\n    firstTokenCheck: true,\n    renderIframe: false,\n    powoFinished: false,\n    refreshInProgress: false,\n    walletPowoInProgress: false,\n    walletAddress: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey,\n    iframeSrcUrl: undefined,\n    stage,\n    redirectUrl: redirectUrl || redirectUrlFromWindow(),\n    tokenIssuanceState: TokenIssuanceState.NOT_REQUESTED,\n    refreshTokenState: RefreshTokenState.NOT_REQUIRED,\n    civicPass: {\n      status: CivicPassIssuanceStatus.NOT_REQUESTED,\n      iframeMinimized: false,\n      renderIframe: false\n    },\n    gatekeeperNetworkAddress,\n    chainType: chainImplementation.chainType\n  });\n  const {\n    gatewayStatus,\n    iframeMinimized,\n    renderIframe,\n    gatewayToken,\n    iframeSrcUrl\n  } = state;\n  useWalletHooks(wallet, state, dispatch); // need to handle wallet connect and disconnect first\n  // ensure the state is updated with any changes to input props\n\n  useEffect(() => {\n    dispatch({\n      type: 'updateStateWithProps',\n      redirectUrl: redirectUrl || redirectUrlFromWindow(),\n      stage,\n      walletAddress: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey,\n      gatekeeperNetworkAddress\n    });\n  }, [redirectUrl, stage, wallet, gatekeeperNetworkAddress]);\n  const clusterName = chainImplementation.httpConfig.queryParams.network;\n  const gatekeeperEndpoint = getGatekeeperEndpoint(stage);\n  const gatekeeperClient = useCallback(() => {\n    if (!gatekeeperNetworkAddress) {\n      throw new Error('No gatekeeper network passed in.');\n    }\n\n    return new GatekeeperClient({\n      baseUrl: gatekeeperEndpoint,\n      stage,\n      queryParams: {\n        network: clusterName,\n        gatekeeperNetworkAddress\n      }\n    });\n  }, [stage, gatekeeperEndpoint, gatekeeperNetworkAddress, clusterName]); // listen and act on events from the compliance iframe\n\n  useCivicPass({\n    wallet\n  }, state, dispatch); // this hook implements the main business logic and handles requesting and refreshing gateway tokens\n\n  useOrchestration({\n    wallet,\n    chainImplementation,\n    stage,\n    gatekeeperClient\n  }, state, dispatch); // requestGatewayToken is the only user-triggered event handled by the component\n  // the compliance iframe user interaction is handled using events triggered from the iframe\n\n  const {\n    requestGatewayToken\n  } = useUserInteraction({\n    wallet\n  }, state, dispatch);\n  const civicPassSrcUrl = getCivicPassEndpoint(stage);\n  /**\n   * manage local state for display of the close button ui relative to iframe loading\n   */\n\n  const [iframeLoaded, setIframeLoaded] = useState(false);\n  useEffect(() => {\n    logger.info('GatewayContext gatewayStatus', GatewayStatus[gatewayStatus]);\n  }, [gatewayStatus]);\n  /**\n   * Reset the iFrame when removing the iFrame from the DOM\n   */\n\n  useEffect(() => {\n    if (!renderIframe) {\n      setIframeLoaded(false);\n    }\n  }, [renderIframe]);\n  return React.createElement(GatewayContext.Provider, {\n    value: {\n      requestGatewayToken,\n      gatewayStatus,\n      gatewayToken: gatewayStatus === GatewayStatus.ACTIVE ? gatewayToken : undefined,\n      stage,\n      civicPassSrcUrl\n    }\n  }, children, renderIframe && React.createElement(\"div\", {\n    \"data-testid\": TESTID_WRAPPER_CONTAINER,\n    hidden: iframeMinimized\n  }, React.createElement(Wrapper, {\n    \"data-testid\": TESTID_WRAPPER,\n    onClose: () => dispatch({\n      type: 'civicPass_close'\n    }),\n    wrapper: wrapper,\n    logo: logo,\n    loaded: iframeLoaded\n  }, React.createElement(IframeResizer, {\n    \"data-testid\": TESTID_IFRAME,\n    src: iframeSrcUrl,\n    id: IFRAME_ID,\n    style: {\n      width: '1px',\n      minWidth: '100%',\n      border: 'none',\n      height: '26px',\n      transition: 'height 0.25s ease'\n    },\n    heightCalculationMethod: \"min\",\n    checkOrigin: false,\n    onLoad: () => setIframeLoaded(true),\n    inPageLinks: true,\n    allow: \"camera\",\n    allowFullScreen: true,\n    frameBorder: \"0\"\n  }))));\n};\nexport const useGateway = () => useContext(GatewayContext);","map":{"version":3,"sources":["D:/Solana/metaplex/metaplex-master/js/packages/fair-launch/node_modules/@civic/solana-gateway-react/dist/esm/gateway/GatewayContext.js"],"names":["React","useContext","useEffect","useReducer","useState","useCallback","IframeResizer","GatewayStatus","TokenIssuanceState","CivicPassIssuanceStatus","RefreshTokenState","logger","Wrapper","IFRAME_ID","TESTID_IFRAME","TESTID_WRAPPER","TESTID_WRAPPER_CONTAINER","DEFAULT_GATEKEEPER_STAGE","getCivicPassEndpoint","getGatekeeperEndpoint","GatekeeperClient","reducer","useUserInteraction","useOrchestration","useCivicPass","useWalletHooks","GatewayContext","createContext","requestGatewayToken","gatewayStatus","NOT_REQUESTED","stage","redirectUrlFromWindow","encodeURIComponent","window","location","href","split","GatewayProvider","children","wallet","chainImplementation","wrapper","logo","redirectUrl","gatekeeperNetwork","options","autoShowModal","gatekeeperNetworkAddress","state","dispatch","UNKNOWN","tokenRequested","iframeMinimized","firstTokenCheck","renderIframe","powoFinished","refreshInProgress","walletPowoInProgress","walletAddress","publicKey","iframeSrcUrl","undefined","tokenIssuanceState","refreshTokenState","NOT_REQUIRED","civicPass","status","chainType","gatewayToken","type","clusterName","httpConfig","queryParams","network","gatekeeperEndpoint","gatekeeperClient","Error","baseUrl","civicPassSrcUrl","iframeLoaded","setIframeLoaded","info","createElement","Provider","value","ACTIVE","hidden","onClose","loaded","src","id","style","width","minWidth","border","height","transition","heightCalculationMethod","checkOrigin","onLoad","inPageLinks","allow","allowFullScreen","frameBorder","useGateway"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,UAAvC,EAAmDC,QAAnD,EAA6DC,WAA7D,QAAgF,OAAhF;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,SAASC,aAAT,EAAwBC,kBAAxB,EAA4CC,uBAA5C,EAAqEC,iBAArE,QAA+F,UAA/F;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,cAAnC,EAAmDC,wBAAnD,QAAmF,cAAnF;AACA,SAASC,wBAAT,EAAmCC,oBAAnC,QAA+D,WAA/D;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AACA,OAAOC,gBAAP,MAA6B,2BAA7B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,MAAMC,cAAc,GAAG1B,KAAK,CAAC2B,aAAN,CAAoB;AACvCC,EAAAA,mBAAmB,EAAE,YAAY,CAAG,CADG;AAEvCC,EAAAA,aAAa,EAAEtB,aAAa,CAACuB,aAFU;AAGvCC,EAAAA,KAAK,EAAEd;AAHgC,CAApB,CAAvB;;AAKA,MAAMe,qBAAqB,GAAG,MAAMC,kBAAkB,CAACC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAAD,CAAtD;;AACA,OAAO,MAAMC,eAAe,GAAG,QAAyJ;AAAA,MAAxJ;AAAEC,IAAAA,QAAQ,GAAG,IAAb;AAAmBC,IAAAA,MAAnB;AAA2BC,IAAAA,mBAA3B;AAAgDC,IAAAA,OAAhD;AAAyDC,IAAAA,IAAzD;AAA+DZ,IAAAA,KAAK,GAAG,MAAvE;AAA+Ea,IAAAA,WAA/E;AAA4FC,IAAAA,iBAA5F;AAA+GC,IAAAA,OAAO,GAAG;AAAEC,MAAAA,aAAa,EAAE;AAAjB;AAAzH,GAAwJ;AACpL,QAAMC,wBAAwB,GAAGH,iBAAjC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoB/C,UAAU,CAACkB,OAAD,EAAU;AAC1CyB,IAAAA,OAD0C;AAE1CjB,IAAAA,aAAa,EAAEtB,aAAa,CAAC4C,OAFa;AAG1CC,IAAAA,cAAc,EAAE,KAH0B;AAI1CC,IAAAA,eAAe,EAAE,KAJyB;AAK1CC,IAAAA,eAAe,EAAE,IALyB;AAM1CC,IAAAA,YAAY,EAAE,KAN4B;AAO1CC,IAAAA,YAAY,EAAE,KAP4B;AAQ1CC,IAAAA,iBAAiB,EAAE,KARuB;AAS1CC,IAAAA,oBAAoB,EAAE,KAToB;AAU1CC,IAAAA,aAAa,EAAEnB,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACoB,SAV5B;AAW1CC,IAAAA,YAAY,EAAEC,SAX4B;AAY1C/B,IAAAA,KAZ0C;AAa1Ca,IAAAA,WAAW,EAAEA,WAAW,IAAIZ,qBAAqB,EAbP;AAc1C+B,IAAAA,kBAAkB,EAAEvD,kBAAkB,CAACsB,aAdG;AAe1CkC,IAAAA,iBAAiB,EAAEtD,iBAAiB,CAACuD,YAfK;AAgB1CC,IAAAA,SAAS,EAAE;AACPC,MAAAA,MAAM,EAAE1D,uBAAuB,CAACqB,aADzB;AAEPuB,MAAAA,eAAe,EAAE,KAFV;AAGPE,MAAAA,YAAY,EAAE;AAHP,KAhB+B;AAqB1CP,IAAAA,wBArB0C;AAsB1CoB,IAAAA,SAAS,EAAE3B,mBAAmB,CAAC2B;AAtBW,GAAV,CAApC;AAwBA,QAAM;AAAEvC,IAAAA,aAAF;AAAiBwB,IAAAA,eAAjB;AAAkCE,IAAAA,YAAlC;AAAgDc,IAAAA,YAAhD;AAA8DR,IAAAA;AAA9D,MAA+EZ,KAArF;AACAxB,EAAAA,cAAc,CAACe,MAAD,EAASS,KAAT,EAAgBC,QAAhB,CAAd,CA3BoL,CA2B3I;AACzC;;AACAhD,EAAAA,SAAS,CAAC,MAAM;AACZgD,IAAAA,QAAQ,CAAC;AACLoB,MAAAA,IAAI,EAAE,sBADD;AAEL1B,MAAAA,WAAW,EAAEA,WAAW,IAAIZ,qBAAqB,EAF5C;AAGLD,MAAAA,KAHK;AAIL4B,MAAAA,aAAa,EAAEnB,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACoB,SAJjE;AAKLZ,MAAAA;AALK,KAAD,CAAR;AAOH,GARQ,EAQN,CAACJ,WAAD,EAAcb,KAAd,EAAqBS,MAArB,EAA6BQ,wBAA7B,CARM,CAAT;AASA,QAAMuB,WAAW,GAAG9B,mBAAmB,CAAC+B,UAApB,CAA+BC,WAA/B,CAA2CC,OAA/D;AACA,QAAMC,kBAAkB,GAAGxD,qBAAqB,CAACY,KAAD,CAAhD;AACA,QAAM6C,gBAAgB,GAAGvE,WAAW,CAAC,MAAM;AACvC,QAAI,CAAC2C,wBAAL,EAA+B;AAC3B,YAAM,IAAI6B,KAAJ,CAAU,kCAAV,CAAN;AACH;;AACD,WAAO,IAAIzD,gBAAJ,CAAqB;AACxB0D,MAAAA,OAAO,EAAEH,kBADe;AAExB5C,MAAAA,KAFwB;AAGxB0C,MAAAA,WAAW,EAAE;AAAEC,QAAAA,OAAO,EAAEH,WAAX;AAAwBvB,QAAAA;AAAxB;AAHW,KAArB,CAAP;AAKH,GATmC,EASjC,CAACjB,KAAD,EAAQ4C,kBAAR,EAA4B3B,wBAA5B,EAAsDuB,WAAtD,CATiC,CAApC,CAxCoL,CAkDpL;;AACA/C,EAAAA,YAAY,CAAC;AAAEgB,IAAAA;AAAF,GAAD,EAAaS,KAAb,EAAoBC,QAApB,CAAZ,CAnDoL,CAoDpL;;AACA3B,EAAAA,gBAAgB,CAAC;AAAEiB,IAAAA,MAAF;AAAUC,IAAAA,mBAAV;AAA+BV,IAAAA,KAA/B;AAAsC6C,IAAAA;AAAtC,GAAD,EAA2D3B,KAA3D,EAAkEC,QAAlE,CAAhB,CArDoL,CAsDpL;AACA;;AACA,QAAM;AAAEtB,IAAAA;AAAF,MAA0BN,kBAAkB,CAAC;AAAEkB,IAAAA;AAAF,GAAD,EAAaS,KAAb,EAAoBC,QAApB,CAAlD;AACA,QAAM6B,eAAe,GAAG7D,oBAAoB,CAACa,KAAD,CAA5C;AACA;AACJ;AACA;;AACI,QAAM,CAACiD,YAAD,EAAeC,eAAf,IAAkC7E,QAAQ,CAAC,KAAD,CAAhD;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,MAAM,CAACuE,IAAP,CAAY,8BAAZ,EAA4C3E,aAAa,CAACsB,aAAD,CAAzD;AACH,GAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;AAGA;AACJ;AACA;;AACI3B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACqD,YAAL,EAAmB;AACf0B,MAAAA,eAAe,CAAC,KAAD,CAAf;AACH;AACJ,GAJQ,EAIN,CAAC1B,YAAD,CAJM,CAAT;AAKA,SAAQvD,KAAK,CAACmF,aAAN,CAAoBzD,cAAc,CAAC0D,QAAnC,EAA6C;AAAEC,IAAAA,KAAK,EAAE;AACtDzD,MAAAA,mBADsD;AAEtDC,MAAAA,aAFsD;AAGtDwC,MAAAA,YAAY,EAAExC,aAAa,KAAKtB,aAAa,CAAC+E,MAAhC,GAAyCjB,YAAzC,GAAwDP,SAHhB;AAItD/B,MAAAA,KAJsD;AAKtDgD,MAAAA;AALsD;AAAT,GAA7C,EAOJxC,QAPI,EAQJgB,YAAY,IAAKvD,KAAK,CAACmF,aAAN,CAAoB,KAApB,EAA2B;AAAE,mBAAenE,wBAAjB;AAA2CuE,IAAAA,MAAM,EAAElC;AAAnD,GAA3B,EACbrD,KAAK,CAACmF,aAAN,CAAoBvE,OAApB,EAA6B;AAAE,mBAAeG,cAAjB;AAAiCyE,IAAAA,OAAO,EAAE,MAAMtC,QAAQ,CAAC;AAAEoB,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAxD;AAAuF5B,IAAAA,OAAO,EAAEA,OAAhG;AAAyGC,IAAAA,IAAI,EAAEA,IAA/G;AAAqH8C,IAAAA,MAAM,EAAET;AAA7H,GAA7B,EACIhF,KAAK,CAACmF,aAAN,CAAoB7E,aAApB,EAAmC;AAAE,mBAAeQ,aAAjB;AAAgC4E,IAAAA,GAAG,EAAE7B,YAArC;AAAmD8B,IAAAA,EAAE,EAAE9E,SAAvD;AAAkE+E,IAAAA,KAAK,EAAE;AACpGC,MAAAA,KAAK,EAAE,KAD6F;AAEpGC,MAAAA,QAAQ,EAAE,MAF0F;AAGpGC,MAAAA,MAAM,EAAE,MAH4F;AAIpGC,MAAAA,MAAM,EAAE,MAJ4F;AAKpGC,MAAAA,UAAU,EAAE;AALwF,KAAzE;AAM5BC,IAAAA,uBAAuB,EAAE,KANG;AAMIC,IAAAA,WAAW,EAAE,KANjB;AAMwBC,IAAAA,MAAM,EAAE,MAAMnB,eAAe,CAAC,IAAD,CANrD;AAM6DoB,IAAAA,WAAW,EAAE,IAN1E;AAMgFC,IAAAA,KAAK,EAAE,QANvF;AAMiGC,IAAAA,eAAe,EAAE,IANlH;AAMwHC,IAAAA,WAAW,EAAE;AANrI,GAAnC,CADJ,CADa,CARb,CAAR;AAiBH,CA1FM;AA2FP,OAAO,MAAMC,UAAU,GAAG,MAAMxG,UAAU,CAACyB,cAAD,CAAnC","sourcesContent":["import React, { useContext, useEffect, useReducer, useState, useCallback } from 'react';\nimport IframeResizer from 'iframe-resizer-react';\nimport { GatewayStatus, TokenIssuanceState, CivicPassIssuanceStatus, RefreshTokenState, } from '../types';\nimport logger from '../logger';\nimport { Wrapper } from '../wrapper/Wrapper';\nimport { IFRAME_ID, TESTID_IFRAME, TESTID_WRAPPER, TESTID_WRAPPER_CONTAINER } from '../constants';\nimport { DEFAULT_GATEKEEPER_STAGE, getCivicPassEndpoint } from '../config';\nimport { getGatekeeperEndpoint } from '../solana/config';\nimport GatekeeperClient from '../utils/gatekeeperClient';\nimport reducer from '../useReducer';\nimport useUserInteraction from '../useHooks/useUserInteraction';\nimport useOrchestration from '../useHooks/useOrchestration';\nimport useCivicPass from '../useHooks/useCivicPass';\nimport useWalletHooks from '../useHooks/useWalletHooks';\nconst GatewayContext = React.createContext({\n    requestGatewayToken: async () => { },\n    gatewayStatus: GatewayStatus.NOT_REQUESTED,\n    stage: DEFAULT_GATEKEEPER_STAGE,\n});\nconst redirectUrlFromWindow = () => encodeURIComponent(window.location.href.split('?')[0]);\nexport const GatewayProvider = ({ children = null, wallet, chainImplementation, wrapper, logo, stage = 'prod', redirectUrl, gatekeeperNetwork, options = { autoShowModal: true }, }) => {\n    const gatekeeperNetworkAddress = gatekeeperNetwork;\n    const [state, dispatch] = useReducer(reducer, {\n        options,\n        gatewayStatus: GatewayStatus.UNKNOWN,\n        tokenRequested: false,\n        iframeMinimized: false,\n        firstTokenCheck: true,\n        renderIframe: false,\n        powoFinished: false,\n        refreshInProgress: false,\n        walletPowoInProgress: false,\n        walletAddress: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey,\n        iframeSrcUrl: undefined,\n        stage,\n        redirectUrl: redirectUrl || redirectUrlFromWindow(),\n        tokenIssuanceState: TokenIssuanceState.NOT_REQUESTED,\n        refreshTokenState: RefreshTokenState.NOT_REQUIRED,\n        civicPass: {\n            status: CivicPassIssuanceStatus.NOT_REQUESTED,\n            iframeMinimized: false,\n            renderIframe: false,\n        },\n        gatekeeperNetworkAddress,\n        chainType: chainImplementation.chainType,\n    });\n    const { gatewayStatus, iframeMinimized, renderIframe, gatewayToken, iframeSrcUrl } = state;\n    useWalletHooks(wallet, state, dispatch); // need to handle wallet connect and disconnect first\n    // ensure the state is updated with any changes to input props\n    useEffect(() => {\n        dispatch({\n            type: 'updateStateWithProps',\n            redirectUrl: redirectUrl || redirectUrlFromWindow(),\n            stage,\n            walletAddress: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey,\n            gatekeeperNetworkAddress,\n        });\n    }, [redirectUrl, stage, wallet, gatekeeperNetworkAddress]);\n    const clusterName = chainImplementation.httpConfig.queryParams.network;\n    const gatekeeperEndpoint = getGatekeeperEndpoint(stage);\n    const gatekeeperClient = useCallback(() => {\n        if (!gatekeeperNetworkAddress) {\n            throw new Error('No gatekeeper network passed in.');\n        }\n        return new GatekeeperClient({\n            baseUrl: gatekeeperEndpoint,\n            stage,\n            queryParams: { network: clusterName, gatekeeperNetworkAddress },\n        });\n    }, [stage, gatekeeperEndpoint, gatekeeperNetworkAddress, clusterName]);\n    // listen and act on events from the compliance iframe\n    useCivicPass({ wallet }, state, dispatch);\n    // this hook implements the main business logic and handles requesting and refreshing gateway tokens\n    useOrchestration({ wallet, chainImplementation, stage, gatekeeperClient }, state, dispatch);\n    // requestGatewayToken is the only user-triggered event handled by the component\n    // the compliance iframe user interaction is handled using events triggered from the iframe\n    const { requestGatewayToken } = useUserInteraction({ wallet }, state, dispatch);\n    const civicPassSrcUrl = getCivicPassEndpoint(stage);\n    /**\n     * manage local state for display of the close button ui relative to iframe loading\n     */\n    const [iframeLoaded, setIframeLoaded] = useState(false);\n    useEffect(() => {\n        logger.info('GatewayContext gatewayStatus', GatewayStatus[gatewayStatus]);\n    }, [gatewayStatus]);\n    /**\n     * Reset the iFrame when removing the iFrame from the DOM\n     */\n    useEffect(() => {\n        if (!renderIframe) {\n            setIframeLoaded(false);\n        }\n    }, [renderIframe]);\n    return (React.createElement(GatewayContext.Provider, { value: {\n            requestGatewayToken,\n            gatewayStatus,\n            gatewayToken: gatewayStatus === GatewayStatus.ACTIVE ? gatewayToken : undefined,\n            stage,\n            civicPassSrcUrl,\n        } },\n        children,\n        renderIframe && (React.createElement(\"div\", { \"data-testid\": TESTID_WRAPPER_CONTAINER, hidden: iframeMinimized },\n            React.createElement(Wrapper, { \"data-testid\": TESTID_WRAPPER, onClose: () => dispatch({ type: 'civicPass_close' }), wrapper: wrapper, logo: logo, loaded: iframeLoaded },\n                React.createElement(IframeResizer, { \"data-testid\": TESTID_IFRAME, src: iframeSrcUrl, id: IFRAME_ID, style: {\n                        width: '1px',\n                        minWidth: '100%',\n                        border: 'none',\n                        height: '26px',\n                        transition: 'height 0.25s ease',\n                    }, heightCalculationMethod: \"min\", checkOrigin: false, onLoad: () => setIframeLoaded(true), inPageLinks: true, allow: \"camera\", allowFullScreen: true, frameBorder: \"0\" }))))));\n};\nexport const useGateway = () => useContext(GatewayContext);\n"]},"metadata":{},"sourceType":"module"}
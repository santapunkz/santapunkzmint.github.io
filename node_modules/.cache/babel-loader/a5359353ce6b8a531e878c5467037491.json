{"ast":null,"code":"import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport { LAMPORTS_PER_SOL, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nexport const FAIR_LAUNCH_PROGRAM_ID = new anchor.web3.PublicKey('faircnAB9k59Y4TXmLabBULeuTLgV7TkGMGNkjnA15j');\nexport const toDate = value => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\nexport const formatNumber = {\n  format: val => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: val => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  }\n};\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\nexport const CIVIC = new anchor.web3.PublicKey('gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs');\nexport const getFairLaunchTicketSeqLookup = async (tokenMint, seq) => {\n  return await anchor.web3.PublicKey.findProgramAddress([Buffer.from('fair_launch'), tokenMint.toBuffer(), seq.toArrayLike(Buffer, 'le', 8)], FAIR_LAUNCH_PROGRAM_ID);\n};\nexport const getAtaForMint = async (mint, buyer) => {\n  return await anchor.web3.PublicKey.findProgramAddress([buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID);\n};\nexport const getNetworkExpire = async gatekeeperNetwork => {\n  return await anchor.web3.PublicKey.findProgramAddress([gatekeeperNetwork.toBuffer(), Buffer.from('expire')], CIVIC);\n};\nexport const getNetworkToken = async (wallet, gatekeeperNetwork) => {\n  return await anchor.web3.PublicKey.findProgramAddress([wallet.toBuffer(), Buffer.from('gateway'), Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]), gatekeeperNetwork.toBuffer()], CIVIC);\n};\nexport const getFairLaunchTicket = async (tokenMint, buyer) => {\n  return await anchor.web3.PublicKey.findProgramAddress([Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()], FAIR_LAUNCH_PROGRAM_ID);\n};\nexport function createAssociatedTokenAccountInstruction(associatedTokenAddress, payer, walletAddress, splTokenMintAddress) {\n  const keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: associatedTokenAddress,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: walletAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: splTokenMintAddress,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: TOKEN_PROGRAM_ID,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([])\n  });\n}","map":{"version":3,"sources":["D:/Solana/metaplex/metaplex-master/js/packages/fair-launch/src/utils.ts"],"names":["anchor","TOKEN_PROGRAM_ID","SystemProgram","LAMPORTS_PER_SOL","SYSVAR_RENT_PUBKEY","TransactionInstruction","FAIR_LAUNCH_PROGRAM_ID","web3","PublicKey","toDate","value","Date","toNumber","numberFormater","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","formatNumber","format","val","asNumber","undefined","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","getFairLaunchTicketSeqLookup","tokenMint","seq","findProgramAddress","Buffer","from","toBuffer","toArrayLike","getAtaForMint","mint","buyer","getNetworkExpire","gatekeeperNetwork","getNetworkToken","wallet","getFairLaunchTicket","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","programId","data"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,uBAAxB;AACA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SACEC,gBADF,EAEEC,kBAFF,EAGEC,sBAHF,QAIO,iBAJP;AAYA,OAAO,MAAMC,sBAAsB,GAAG,IAAIN,MAAM,CAACO,IAAP,CAAYC,SAAhB,CACpC,6CADoC,CAA/B;AAIP,OAAO,MAAMC,MAAM,GAAIC,KAAD,IAAuB;AAC3C,MAAI,CAACA,KAAL,EAAY;AACV;AACD;;AAED,SAAO,IAAIC,IAAJ,CAASD,KAAK,CAACE,QAAN,KAAmB,IAA5B,CAAP;AACD,CANM;AAQP,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;AACpDC,EAAAA,KAAK,EAAE,SAD6C;AAEpDC,EAAAA,qBAAqB,EAAE,CAF6B;AAGpDC,EAAAA,qBAAqB,EAAE;AAH6B,CAA/B,CAAvB;AAMA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,MAAM,EAAGC,GAAD,IAAkB;AACxB,QAAI,CAACA,GAAL,EAAU;AACR,aAAO,IAAP;AACD;;AAED,WAAOR,cAAc,CAACO,MAAf,CAAsBC,GAAtB,CAAP;AACD,GAPyB;AAQ1BC,EAAAA,QAAQ,EAAGD,GAAD,IAAqB;AAC7B,QAAI,CAACA,GAAL,EAAU;AACR,aAAOE,SAAP;AACD;;AAED,WAAOF,GAAG,CAACT,QAAJ,KAAiBT,gBAAxB;AACD;AAdyB,CAArB;AAiBP,OAAO,MAAMqB,uCAAuC,GAClD,IAAIxB,MAAM,CAACO,IAAP,CAAYC,SAAhB,CAA0B,8CAA1B,CADK;AAGP,OAAO,MAAMiB,KAAK,GAAG,IAAIzB,MAAM,CAACO,IAAP,CAAYC,SAAhB,CACnB,6CADmB,CAAd;AAGP,OAAO,MAAMkB,4BAA4B,GAAG,OAC1CC,SAD0C,EAE1CC,GAF0C,KAGG;AAC7C,SAAO,MAAM5B,MAAM,CAACO,IAAP,CAAYC,SAAZ,CAAsBqB,kBAAtB,CACX,CACEC,MAAM,CAACC,IAAP,CAAY,aAAZ,CADF,EAEEJ,SAAS,CAACK,QAAV,EAFF,EAGEJ,GAAG,CAACK,WAAJ,CAAgBH,MAAhB,EAAwB,IAAxB,EAA8B,CAA9B,CAHF,CADW,EAMXxB,sBANW,CAAb;AAQD,CAZM;AAcP,OAAO,MAAM4B,aAAa,GAAG,OAC3BC,IAD2B,EAE3BC,KAF2B,KAGkB;AAC7C,SAAO,MAAMpC,MAAM,CAACO,IAAP,CAAYC,SAAZ,CAAsBqB,kBAAtB,CACX,CAACO,KAAK,CAACJ,QAAN,EAAD,EAAmB/B,gBAAgB,CAAC+B,QAAjB,EAAnB,EAAgDG,IAAI,CAACH,QAAL,EAAhD,CADW,EAEXR,uCAFW,CAAb;AAID,CARM;AAUP,OAAO,MAAMa,gBAAgB,GAAG,MAC9BC,iBAD8B,IAEe;AAC7C,SAAO,MAAMtC,MAAM,CAACO,IAAP,CAAYC,SAAZ,CAAsBqB,kBAAtB,CACX,CAACS,iBAAiB,CAACN,QAAlB,EAAD,EAA+BF,MAAM,CAACC,IAAP,CAAY,QAAZ,CAA/B,CADW,EAEXN,KAFW,CAAb;AAID,CAPM;AASP,OAAO,MAAMc,eAAe,GAAG,OAC7BC,MAD6B,EAE7BF,iBAF6B,KAGgB;AAC7C,SAAO,MAAMtC,MAAM,CAACO,IAAP,CAAYC,SAAZ,CAAsBqB,kBAAtB,CACX,CACEW,MAAM,CAACR,QAAP,EADF,EAEEF,MAAM,CAACC,IAAP,CAAY,SAAZ,CAFF,EAGED,MAAM,CAACC,IAAP,CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAZ,CAHF,EAIEO,iBAAiB,CAACN,QAAlB,EAJF,CADW,EAOXP,KAPW,CAAb;AASD,CAbM;AAeP,OAAO,MAAMgB,mBAAmB,GAAG,OACjCd,SADiC,EAEjCS,KAFiC,KAGY;AAC7C,SAAO,MAAMpC,MAAM,CAACO,IAAP,CAAYC,SAAZ,CAAsBqB,kBAAtB,CACX,CAACC,MAAM,CAACC,IAAP,CAAY,aAAZ,CAAD,EAA6BJ,SAAS,CAACK,QAAV,EAA7B,EAAmDI,KAAK,CAACJ,QAAN,EAAnD,CADW,EAEX1B,sBAFW,CAAb;AAID,CARM;AAUP,OAAO,SAASoC,uCAAT,CACLC,sBADK,EAELC,KAFK,EAGLC,aAHK,EAILC,mBAJK,EAKL;AACA,QAAMC,IAAI,GAAG,CACX;AACEC,IAAAA,MAAM,EAAEJ,KADV;AAEEK,IAAAA,QAAQ,EAAE,IAFZ;AAGEC,IAAAA,UAAU,EAAE;AAHd,GADW,EAMX;AACEF,IAAAA,MAAM,EAAEL,sBADV;AAEEM,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,UAAU,EAAE;AAHd,GANW,EAWX;AACEF,IAAAA,MAAM,EAAEH,aADV;AAEEI,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,UAAU,EAAE;AAHd,GAXW,EAgBX;AACEF,IAAAA,MAAM,EAAEF,mBADV;AAEEG,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,UAAU,EAAE;AAHd,GAhBW,EAqBX;AACEF,IAAAA,MAAM,EAAE9C,aAAa,CAACiD,SADxB;AAEEF,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,UAAU,EAAE;AAHd,GArBW,EA0BX;AACEF,IAAAA,MAAM,EAAE/C,gBADV;AAEEgD,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,UAAU,EAAE;AAHd,GA1BW,EA+BX;AACEF,IAAAA,MAAM,EAAE5C,kBADV;AAEE6C,IAAAA,QAAQ,EAAE,KAFZ;AAGEC,IAAAA,UAAU,EAAE;AAHd,GA/BW,CAAb;AAqCA,SAAO,IAAI7C,sBAAJ,CAA2B;AAChC0C,IAAAA,IADgC;AAEhCI,IAAAA,SAAS,EAAE3B,uCAFqB;AAGhC4B,IAAAA,IAAI,EAAEtB,MAAM,CAACC,IAAP,CAAY,EAAZ;AAH0B,GAA3B,CAAP;AAKD","sourcesContent":["import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n}\n\nexport const FAIR_LAUNCH_PROGRAM_ID = new anchor.web3.PublicKey(\n  'faircnAB9k59Y4TXmLabBULeuTLgV7TkGMGNkjnA15j',\n);\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\nexport const getFairLaunchTicketSeqLookup = async (\n  tokenMint: anchor.web3.PublicKey,\n  seq: anchor.BN,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      Buffer.from('fair_launch'),\n      tokenMint.toBuffer(),\n      seq.toArrayLike(Buffer, 'le', 8),\n    ],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport const getFairLaunchTicket = async (\n  tokenMint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('fair_launch'), tokenMint.toBuffer(), buyer.toBuffer()],\n    FAIR_LAUNCH_PROGRAM_ID,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}